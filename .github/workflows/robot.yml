name: Robot CI (smoke first)

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"   # runs daily at 02:00 UTC

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - uses: actions/setup-node@v4
        with: { node-version: '20' }

      - name: Install Python deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -r requirements.txt
          python -c "import Browser, robot; print('Browser:', Browser.__version__); print('Robot:', robot.__version__)"

      # Install Linux libs for Playwright (Ubuntu)
      - name: Install Playwright system deps
        run: npx playwright install-deps

      - name: Init Playwright browsers (rfbrowser)
        run: |
          . .venv/bin/activate
          rfbrowser init

      - name: Run SMOKE (ui_login.robot) with TRACE + Allure
        env:
          HEADLESS: "True"
          BROWSER: "chromium"
        run: |
          . .venv/bin/activate
          mkdir -p smoke_results
          robot --listener "allure_robotframework;smoke_results/allure" -L TRACE -d smoke_results tests/ui_login.robot

      - name: Upload smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: smoke_results/
          retention-days: 7

  # 1) Full matrix after smoke (so we still get artifacts if it fails)
  tests:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs: smoke
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Install Python deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -r requirements.txt
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-msplaywright-${{ hashFiles('**/requirements.txt') }}
      - name: Install Playwright system deps
        run: npx playwright install-deps
      - name: Init Playwright browsers
        run: |
          . .venv/bin/activate
          rfbrowser init
      - name: Run Robot tests (Pabot + Allure)
        env:
            HEADLESS: "True"
            BROWSER: ${{ matrix.browser }}
        run: |
            . .venv/bin/activate
            pabot --listener "allure_robotframework;results/allure" -d results --processes 2 tests
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-results-${{ matrix.browser }}
          path: results/
          retention-days: 7

  allure-pages:
    if: ${{ always() && needs.tests.result != 'skipped' }}
    needs: tests
    runs-on: ubuntu-latest
    permissions:
      contents: write        # allow pushing to gh-pages
    steps:
      - uses: actions/checkout@v4

      # Download all per-browser artifacts produced by "tests" job
      - name: Download results artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: robot-results-*
          path: ./artifacts
          merge-multiple: true

      # Collect every ".../results/allure" directory into a single comma list
      - name: Collect Allure results dirs
        id: collect
        run: |
          set -e
          dirs=$(find ./artifacts -type d -path "*/results/allure" | tr '\n' ',' | sed 's/,$//')
          echo "dirs=$dirs" >> $GITHUB_OUTPUT
          if [ -n "$dirs" ]; then echo "has_dirs=true" >> $GITHUB_OUTPUT; else echo "has_dirs=false" >> $GITHUB_OUTPUT; fi
          echo "Found dirs: ${dirs:-<none>}"

      # Generate & publish Allure report to gh-pages with history
      - name: Generate & publish Allure to GitHub Pages
        if: ${{ steps.collect.outputs.has_dirs == 'true' }}
        uses: simple-elf/allure-report-action@v1.7
        with:
          allure_results: ${{ steps.collect.outputs.dirs }}  # comma-separated dirs
          allure_report: ./allure-report
          gh_pages: gh-pages
          keep_reports: 20
          publish: true